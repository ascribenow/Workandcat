#!/usr/bin/env python3

import requests
import json
import uuid
from datetime import datetime
import time

class MCQAnswerComparisonTester:
    def __init__(self):
        self.base_url = "https://learning-tutor.preview.emergentagent.com/api"
        self.auth_headers = None
        self.user_id = None
        
    def authenticate(self):
        """Authenticate with test credentials"""
        print("üîê AUTHENTICATING...")
        
        auth_data = {
            "email": "sp@theskinmantra.com",
            "password": "student123"
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/auth/login", 
                json=auth_data, 
                timeout=30,
                verify=False
            )
            
            if response.status_code == 200:
                data = response.json()
                token = data.get('access_token')
                self.auth_headers = {
                    'Authorization': f'Bearer {token}',
                    'Content-Type': 'application/json'
                }
                self.user_id = data.get('user', {}).get('id')
                adaptive_enabled = data.get('user', {}).get('adaptive_enabled', False)
                
                print(f"‚úÖ Authentication successful")
                print(f"üìä JWT Token length: {len(token)} characters")
                print(f"üìä User ID: {self.user_id}")
                print(f"üìä Adaptive enabled: {adaptive_enabled}")
                return True
            else:
                print(f"‚ùå Authentication failed: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Authentication error: {e}")
            return False
    
    def get_sample_question(self):
        """Get a sample question for testing"""
        print("\nüìã GETTING SAMPLE QUESTION...")
        
        try:
            response = requests.get(
                f"{self.base_url}/questions?limit=1",
                headers=self.auth_headers,
                timeout=30,
                verify=False
            )
            
            if response.status_code == 200:
                questions = response.json()
                if questions and len(questions) > 0:
                    question = questions[0]
                    print(f"‚úÖ Sample question retrieved")
                    print(f"üìä Question ID: {question.get('id')}")
                    print(f"üìä Question stem: {question.get('stem', '')[:100]}...")
                    print(f"üìä Stored answer: '{question.get('right_answer', '')}'")
                    return question
                else:
                    print("‚ùå No questions found")
                    return None
            else:
                print(f"‚ùå Failed to get questions: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error getting sample question: {e}")
            return None
    
    def test_answer_comparison(self, question_id, user_answer, expected_correct, test_name):
        """Test a specific answer comparison scenario"""
        print(f"\nüß™ {test_name}")
        print(f"   User Answer: '{user_answer}'")
        print(f"   Expected: {'CORRECT' if expected_correct else 'INCORRECT'}")
        
        session_id = f"mcq_test_{uuid.uuid4()}"
        
        answer_data = {
            "session_id": session_id,
            "question_id": question_id,
            "action": "submit",
            "data": {
                "user_answer": user_answer,
                "time_taken": 30,
                "question_number": 1
            },
            "timestamp": datetime.utcnow().isoformat()
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/log/question-action",
                json=answer_data,
                headers=self.auth_headers,
                timeout=30,
                verify=False
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success') and data.get('result'):
                    result = data['result']
                    actual_correct = result.get('correct', False)
                    status = result.get('status', '')
                    
                    print(f"   üìä Backend response: correct={actual_correct}, status='{status}'")
                    
                    if actual_correct == expected_correct:
                        print(f"   ‚úÖ TEST PASSED - Answer comparison working correctly")
                        return True
                    else:
                        print(f"   ‚ùå TEST FAILED - Expected {expected_correct}, got {actual_correct}")
                        return False
                else:
                    print(f"   ‚ùå Invalid response format: {data}")
                    return False
            else:
                print(f"   ‚ùå Request failed: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error testing answer: {e}")
            return False
    
    def run_comprehensive_mcq_test(self):
        """Run comprehensive MCQ answer comparison tests"""
        print("üéØ FINAL 100% MCQ ANSWER COMPARISON VALIDATION")
        print("=" * 80)
        print("OBJECTIVE: Validate the exact MCQ answer comparison fix from review request")
        print("FOCUS: Frontend sends clean '20%' ‚Üí Backend compares '20%' vs '20%' ‚Üí CORRECT")
        print("=" * 80)
        
        # Step 1: Authenticate
        if not self.authenticate():
            return False
        
        # Step 2: Get sample question
        question = self.get_sample_question()
        if not question:
            return False
        
        question_id = question.get('id')
        stored_answer = question.get('right_answer', '')
        
        # Extract a clean answer for testing (simulate what frontend should send)
        # If stored answer is "After two replacements, the percentage of water in the mixture is 35.2%."
        # We want to extract "35.2%" as the clean answer
        clean_answer = stored_answer
        if "%" in stored_answer:
            # Extract percentage value
            import re
            percentages = re.findall(r'\d+\.?\d*%', stored_answer)
            if percentages:
                clean_answer = percentages[0]
        elif any(unit in stored_answer.lower() for unit in ['km/h', 'mph', 'days', 'hours']):
            # Extract numeric value with unit
            import re
            values = re.findall(r'\d+\.?\d*\s*(?:km/h|mph|days|hours)', stored_answer)
            if values:
                clean_answer = values[0]
        
        print(f"\nüìä TESTING WITH:")
        print(f"   Original stored answer: '{stored_answer}'")
        print(f"   Clean answer for testing: '{clean_answer}'")
        
        # Step 3: Run test scenarios
        test_scenarios = [
            {
                "name": "CRITICAL: MCQ Prefix Removal Test",
                "user_answer": f"(A) {clean_answer}",
                "expected": True,
                "description": "The exact issue from review request - frontend sends clean answer"
            },
            {
                "name": "Direct Clean Answer Match",
                "user_answer": clean_answer,
                "expected": True,
                "description": "Direct match of clean answers"
            },
            {
                "name": "Different MCQ Option (Incorrect)",
                "user_answer": "(B) Wrong Answer",
                "expected": False,
                "description": "Wrong answer should be marked incorrect"
            },
            {
                "name": "Case Insensitive Test",
                "user_answer": clean_answer.lower() if clean_answer else "test",
                "expected": True,
                "description": "Case insensitive comparison should work"
            },
            {
                "name": "Whitespace Handling",
                "user_answer": f"  {clean_answer}  " if clean_answer else "  test  ",
                "expected": True,
                "description": "Whitespace should be handled correctly"
            }
        ]
        
        passed_tests = 0
        total_tests = len(test_scenarios)
        
        for i, scenario in enumerate(test_scenarios, 1):
            print(f"\n{'='*60}")
            print(f"TEST {i}/{total_tests}: {scenario['name']}")
            print(f"Description: {scenario['description']}")
            
            success = self.test_answer_comparison(
                question_id,
                scenario['user_answer'],
                scenario['expected'],
                scenario['name']
            )
            
            if success:
                passed_tests += 1
        
        # Step 4: Results Summary
        print(f"\n{'='*80}")
        print("üéØ MCQ ANSWER COMPARISON VALIDATION RESULTS")
        print(f"{'='*80}")
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"Tests Passed: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        
        if passed_tests == total_tests:
            print("\nüéâ 100% SUCCESS - MCQ ANSWER COMPARISON FIX VALIDATED!")
            print("‚úÖ Frontend clean answer extraction working")
            print("‚úÖ Backend clean answer comparison working") 
            print("‚úÖ No false negatives (correct answers marked incorrect)")
            print("‚úÖ No false positives (incorrect answers marked correct)")
            print("‚úÖ The exact issue from review request is FIXED")
            print("‚úÖ Production ready for 100% accurate MCQ comparison")
            return True
        else:
            print(f"\n‚ùå VALIDATION FAILED - {total_tests - passed_tests} tests failed")
            print("‚ùå MCQ answer comparison still has issues")
            print("‚ùå Additional fixes required")
            return False

if __name__ == "__main__":
    tester = MCQAnswerComparisonTester()
    success = tester.run_comprehensive_mcq_test()
    exit(0 if success else 1)