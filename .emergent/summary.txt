<analysis>
The trajectory details an AI engineer's extensive work on the Twelvr application, involving critical fixes, refactoring, and feature implementation. Initially, the focus was on resolving persistent database issues, specifically the re-emergence of 13 deleted tables in Supabase, which required a systematic removal of code dependencies and a careful, ordered database drop. Concurrently, a major  bug was addressed, culminating in a one-time recalculation across all questions. A new admin UI button was added to trigger this recalculation.

A significant portion of the work involved completely overhauling the  and  calculation. This transitioned from an LLM-generated approach to a precise programmatic formula (), with user-defined band thresholds. This change necessitated updating LLM prompts, enrichment services, and running a full data recalculation twice to incorporate revised band definitions, resulting in a significantly more balanced difficulty distribution. The immediate task involves compiling a comprehensive RFI documentation package detailing all logic and LLM prompts.
</analysis>

<product_requirements>
The Twelvr application is an adaptive CAT preparation platform that leverages LLM-assisted features for high-quality enrichment of PYQs (Previous Year Questions) and regular questions. It integrates various LLMs (OpenAI, Google Gemini, Anthropic), Razorpay payments, a referral system, and adaptive session logic backed by PostgreSQL (Supabase). Key functionalities include a  field for CSV content and an LLM-based  calculation for regular questions. The platform aims to standardize LLM enrichment, implement an LLM-semantic-match  field, and decouple CSV upload from LLM enrichment, now triggered via admin endpoints. All LLM-generated fields and 8 CSV fields undergo a strict 22-criteria quality verification. Recent work included mathematical display (KaTeX), preparing the database for a new session/adaptivity structure by removing legacy tables and cleaning up related code, and most recently, revamping the difficulty scoring mechanism for all questions to be programmatic and user-defined.
</product_requirements>

<key_technical_concepts>
- Full-stack Architecture: React (frontend), FastAPI (backend), PostgreSQL (Supabase)
- LLM Integration: OpenAI (GPT-4o, GPT-4o-mini), Anthropic, Google Gemini
- Database Management: SQLAlchemy ORM, direct SQL queries
- API Communication: RESTful APIs, FastAPI (synchronous DB calls)
- Canonical Taxonomy: Standardized classification
- Mathematical Rendering: KaTeX, react-katex, DOMPurify
- Deployment: Kubernetes container environment, background jobs
</key_technical_concepts>

<code_architecture>

-   ****: Defines PostgreSQL schema.
    -   **Importance**: Central to application data models.
    -   **Changes**: Legacy tables (, , , , , , , etc.) and their SQLAlchemy model definitions were removed to address Supabase re-creation issues. The  column was also removed.
-   ****: FastAPI application handling API requests.
    -   **Importance**: Main entry point for backend API.
    -   **Changes**: Rewritten to remove session/mastery/diagnostic functionality. Database calls were converted to synchronous SQLAlchemy. A new endpoint  was added to trigger PYQ frequency recalculation.
-   ****: Core LLM enrichment logic for non-PYQ questions.
    -   **Importance**: Orchestrates multi-stage LLM enrichment.
    -   **Changes**: Logic for  refined. LLM prompt was updated to *remove* direct generation of  and , retaining assess complexity for  context. Programmatic calculation of  and  was integrated.
-   ****: LLM enrichment logic for PYQ questions.
    -   **Importance**: Handles PYQ enrichment.
    -   **Changes**: Similar to , LLM prompt was updated to remove direct generation of  and , retaining assess complexity for  context. Programmatic calculation of  and  was integrated.
-   ****: Centralizes LLM operations.
    -   **Importance**: Provides LLM-based utility functions like  calculation.
    -   **Changes**:  logic for multi-level LLM fallback was confirmed, and its call from  was fixed to filter based on regular question difficulty.
-   ****: Manages background processing tasks.
    -   **Importance**: Runs tasks that don't block the main API.
    -   **Changes**: Imports and references to deleted modules/tables were commented out or removed, eventually being completely disabled to resolve database dependency issues.
-   ****: Contains various formulas.
    -   **Importance**: Logic for calculations like importance score.
    -   **Changes**: Removed references to the  field.
-   ** (CREATED)**:
    -   **Importance**: Temporary script to re-run PYQ frequency calculation across all quality-verified questions after a bug fix.
    -   **Changes**: Iterates through questions and triggers corrected frequency calculation. This script has completed its run.
-   ** (CREATED)**:
    -   **Importance**: Script to systematically drop 13 legacy database tables in the correct dependency order to resolve the Supabase re-creation issue.
    -   **Changes**: Contains direct SQL commands to drop tables like , , , , , etc., in a transaction-aware manner.
-   ** (CREATED)**:
    -   **Importance**: Centralizes the new programmatic difficulty calculation and band mapping logic.
    -   **Changes**: Contains  function (to extract steps from ) and  (implementing the formula  and the user-defined band thresholds).
-   ** (CREATED)**:
    -   **Importance**: Script to apply the new programmatic  and  calculation to all existing  and  data.
    -   **Changes**: Iterates through both tables, uses  to recompute and update only  and . This script was run twice with updated band definitions.
-   ****: Frontend component for the admin dashboard.
    -   **Importance**: Displays admin controls and data.
    -   **Changes**: Replaced the Enrich Regular button with a new ðŸ”¢ Recalculate Frequency button, linked to the new background job.
-   **Deleted Backend Files**: Numerous files related to sessions, mastery, plans, and various migrations were deleted.
-   **Deleted Frontend Files**: Components related to deleted backend functionality were removed.
</code_architecture>

<pending_tasks>
- Design and implement a new session and adaptivity structure based on the current clean database.
- Address the data quality issue of missing Coordinate Geometry PYQs, and investigate the PYQ upload/enrichment process for this category.
</pending_tasks>

<current_work>
The AI engineer is currently compiling a comprehensive RFI (Request for Information) documentation package for the user, detailing all logic, formulas, thresholds, verbatim LLM prompts, and fallbacks used in Twelvrâ€™s data pipelines and adaptive signals. This package is being generated as a single, comprehensive markdown file named  along with supporting CSV files. This task was initiated by the user's detailed RFI prompt, which requested an end-to-end description of the enrichment processes for both regular and PYQ questions, the new difficulty calculator, frequency scoring, quality verification, fallbacks, and a change log. The AI engineer has just finished collecting the necessary LLM prompts (regular enrichment, PYQ enrichment, PYQ frequency scoring) and is proceeding with the final compilation of the document.
</current_work>

<optional_next_step>
Complete the compilation of the  file and any associated CSVs.
</optional_next_step>
