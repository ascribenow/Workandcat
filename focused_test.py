#!/usr/bin/env python3
"""
Focused test for Type diversity enforcement and LLM enrichment validation
"""

import requests
import json
import time
import sys

def test_basic_connectivity():
    """Test basic API connectivity"""
    try:
        response = requests.get("https://twelvr-mcq.preview.emergentagent.com/api/", timeout=10)
        print(f"‚úÖ API connectivity: {response.status_code}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå API connectivity failed: {e}")
        return False

def test_admin_authentication():
    """Test admin authentication"""
    try:
        login_data = {
            "email": "sumedhprabhu18@gmail.com",
            "password": "admin2025"
        }
        
        response = requests.post(
            "https://twelvr-mcq.preview.emergentagent.com/api/auth/login",
            json=login_data,
            timeout=10
        )
        
        print(f"‚úÖ Admin login: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            return data.get('access_token')
        return None
    except Exception as e:
        print(f"‚ùå Admin login failed: {e}")
        return None

def test_student_authentication():
    """Test student authentication"""
    try:
        login_data = {
            "email": "student@catprep.com",
            "password": "student123"
        }
        
        response = requests.post(
            "https://twelvr-mcq.preview.emergentagent.com/api/auth/login",
            json=login_data,
            timeout=10
        )
        
        print(f"‚úÖ Student login: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            return data.get('access_token')
        return None
    except Exception as e:
        print(f"‚ùå Student login failed: {e}")
        return None

def test_llm_enrichment_priority(admin_token):
    """Test LLM Enrichment Priority - Core requirement"""
    print("\nüß† TESTING LLM ENRICHMENT PRIORITY")
    print("=" * 50)
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {admin_token}'
    }
    
    # Test question creation with LLM enrichment
    test_question = {
        "stem": "A train traveling at 90 km/h takes 4 hours to cover a distance. What is the distance covered?",
        "hint_category": "Arithmetic",
        "hint_subcategory": "Time-Speed-Distance",
        "source": "LLM Priority Test"
    }
    
    try:
        response = requests.post(
            "https://twelvr-mcq.preview.emergentagent.com/api/questions",
            json=test_question,
            headers=headers,
            timeout=15
        )
        
        print(f"üìä Question creation: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            question_id = data.get('question_id')
            status = data.get('status')
            
            print(f"üìä Question ID: {question_id}")
            print(f"üìä Status: {status}")
            
            if status == "enrichment_queued":
                print("‚úÖ LLM enrichment queued successfully")
                
                # Wait for enrichment
                print("‚è≥ Waiting for LLM enrichment...")
                time.sleep(12)
                
                # Check enrichment result
                response = requests.get(
                    "https://twelvr-mcq.preview.emergentagent.com/api/questions?limit=5",
                    headers=headers,
                    timeout=10
                )
                
                if response.status_code == 200:
                    questions = response.json().get('questions', [])
                    for q in questions:
                        if q.get('id') == question_id:
                            answer = q.get('answer', '')
                            solution = q.get('solution_approach', '')
                            type_of_question = q.get('type_of_question', '')
                            
                            print(f"üìä Answer: {answer}")
                            print(f"üìä Solution: {solution[:100]}...")
                            print(f"üìä Type: {type_of_question}")
                            
                            # Check for LLM processing evidence
                            if (answer and answer != "To be generated by LLM" and
                                solution and "Mathematical approach" not in solution and
                                type_of_question and type_of_question.strip()):
                                print("‚úÖ LLM ENRICHMENT: Evidence of LLM processing found")
                                return True
                            else:
                                print("‚ùå LLM ENRICHMENT: No evidence of LLM processing")
                                return False
                            break
                    else:
                        print("‚ùå Question not found after enrichment")
                        return False
            else:
                print("‚ùå LLM enrichment not queued properly")
                return False
        else:
            print(f"‚ùå Question creation failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå LLM enrichment test failed: {e}")
        return False

def test_session_engine_priority(student_token):
    """Test Session Engine Priority - Core requirement"""
    print("\n‚öôÔ∏è TESTING SESSION ENGINE PRIORITY")
    print("=" * 50)
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {student_token}'
    }
    
    try:
        # Create multiple sessions to test consistency
        session_results = []
        
        for i in range(3):
            session_data = {"target_minutes": 30}
            response = requests.post(
                "https://twelvr-mcq.preview.emergentagent.com/api/sessions/start",
                json=session_data,
                headers=headers,
                timeout=15
            )
            
            print(f"üìä Session {i+1} creation: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                session_type = data.get('session_type', '')
                total_questions = data.get('total_questions', 0)
                personalization = data.get('personalization', {})
                
                session_results.append({
                    'session_type': session_type,
                    'total_questions': total_questions,
                    'personalization_applied': personalization.get('applied', False)
                })
                
                print(f"   Type: {session_type}")
                print(f"   Questions: {total_questions}")
                print(f"   Personalized: {personalization.get('applied', False)}")
        
        # Analyze results
        intelligent_sessions = sum(1 for s in session_results if s['session_type'] == 'intelligent_12_question_set')
        twelve_question_sessions = sum(1 for s in session_results if s['total_questions'] == 12)
        
        print(f"\nüìä Analysis:")
        print(f"   Intelligent sessions: {intelligent_sessions}/3")
        print(f"   12-question sessions: {twelve_question_sessions}/3")
        
        if intelligent_sessions >= 2 and twelve_question_sessions >= 2:
            print("‚úÖ SESSION ENGINE: Type diversity enforcement is primary")
            return True
        else:
            print("‚ùå SESSION ENGINE: Type diversity enforcement not working as primary")
            return False
            
    except Exception as e:
        print(f"‚ùå Session engine test failed: {e}")
        return False

def test_canonical_taxonomy_compliance(admin_token):
    """Test Canonical Taxonomy Compliance - Core requirement"""
    print("\nüìã TESTING CANONICAL TAXONOMY COMPLIANCE")
    print("=" * 50)
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {admin_token}'
    }
    
    try:
        # Get questions to analyze taxonomy compliance
        response = requests.get(
            "https://twelvr-mcq.preview.emergentagent.com/api/questions?limit=50",
            headers=headers,
            timeout=10
        )
        
        print(f"üìä Questions retrieval: {response.status_code}")
        if response.status_code == 200:
            questions = response.json().get('questions', [])
            print(f"üìä Analyzing {len(questions)} questions")
            
            # Expected canonical types
            expected_types = [
                "Basics", "Trains", "Circular Track Motion", "Races", 
                "Relative Speed", "Boats and Streams", "Two variable systems", 
                "Work Time Efficiency"
            ]
            
            # Analyze taxonomy compliance
            types_found = set()
            canonical_type_count = 0
            questions_with_type = 0
            
            for q in questions:
                type_of_question = q.get('type_of_question', '')
                subcategory = q.get('subcategory', '')
                
                if type_of_question and type_of_question.strip():
                    questions_with_type += 1
                    types_found.add(type_of_question)
                    
                    if type_of_question in expected_types:
                        canonical_type_count += 1
            
            type_coverage = (questions_with_type / len(questions)) * 100 if questions else 0
            canonical_compliance = (canonical_type_count / questions_with_type) * 100 if questions_with_type else 0
            
            print(f"üìä Type field coverage: {type_coverage:.1f}%")
            print(f"üìä Canonical compliance: {canonical_compliance:.1f}%")
            print(f"üìä Unique types found: {len(types_found)}")
            print(f"üìä Types: {sorted(list(types_found))}")
            
            if type_coverage >= 90 and canonical_compliance >= 70:
                print("‚úÖ CANONICAL TAXONOMY: Good compliance with canonical taxonomy")
                return True
            else:
                print("‚ùå CANONICAL TAXONOMY: Poor compliance with canonical taxonomy")
                return False
        else:
            print(f"‚ùå Questions retrieval failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Canonical taxonomy test failed: {e}")
        return False

def test_session_quality_with_priority_logic(student_token):
    """Test Session Quality with Priority Logic - Core requirement"""
    print("\nüéØ TESTING SESSION QUALITY WITH PRIORITY LOGIC")
    print("=" * 50)
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {student_token}'
    }
    
    try:
        # Create a session and analyze its quality
        session_data = {"target_minutes": 30}
        response = requests.post(
            "https://twelvr-mcq.preview.emergentagent.com/api/sessions/start",
            json=session_data,
            headers=headers,
            timeout=15
        )
        
        print(f"üìä Session creation: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            session_id = data.get('session_id')
            session_type = data.get('session_type')
            total_questions = data.get('total_questions', 0)
            personalization = data.get('personalization', {})
            
            print(f"üìä Session ID: {session_id}")
            print(f"üìä Session type: {session_type}")
            print(f"üìä Total questions: {total_questions}")
            print(f"üìä Personalization: {personalization}")
            
            # Analyze Type diversity in session
            if session_id:
                session_types = set()
                questions_analyzed = 0
                
                # Get first few questions to analyze Type diversity
                for i in range(min(5, total_questions)):
                    response = requests.get(
                        f"https://twelvr-mcq.preview.emergentagent.com/api/sessions/{session_id}/next-question",
                        headers=headers,
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        question_data = response.json()
                        question = question_data.get('question', {})
                        type_of_question = question.get('type_of_question', '')
                        
                        if type_of_question and type_of_question.strip():
                            session_types.add(type_of_question)
                        questions_analyzed += 1
                    else:
                        break
                
                type_diversity_count = len(session_types)
                print(f"üìä Questions analyzed: {questions_analyzed}")
                print(f"üìä Type diversity: {type_diversity_count}")
                print(f"üìä Types in session: {sorted(list(session_types))}")
                
                # Check quality criteria
                quality_score = 0
                
                if session_type == 'intelligent_12_question_set':
                    quality_score += 1
                    print("‚úÖ Using intelligent session type")
                
                if total_questions == 12:
                    quality_score += 1
                    print("‚úÖ Generates exactly 12 questions")
                
                if type_diversity_count >= 2:
                    quality_score += 1
                    print("‚úÖ Good Type diversity")
                
                if personalization.get('applied', False):
                    quality_score += 1
                    print("‚úÖ Personalization applied")
                
                if quality_score >= 3:
                    print("‚úÖ SESSION QUALITY: High quality with priority logic")
                    return True
                else:
                    print("‚ùå SESSION QUALITY: Poor quality or missing priority logic")
                    return False
            else:
                print("‚ùå No session ID returned")
                return False
        else:
            print(f"‚ùå Session creation failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Session quality test failed: {e}")
        return False

def main():
    """Main test execution"""
    print("üöÄ FOCUSED TYPE DIVERSITY ENFORCEMENT & LLM ENRICHMENT TESTING")
    print("=" * 70)
    
    # Test basic connectivity
    if not test_basic_connectivity():
        print("‚ùå Basic connectivity failed - cannot proceed")
        sys.exit(1)
    
    # Test authentication
    admin_token = test_admin_authentication()
    student_token = test_student_authentication()
    
    if not admin_token or not student_token:
        print("‚ùå Authentication failed - cannot proceed")
        sys.exit(1)
    
    # Run core tests
    results = {
        'llm_enrichment': test_llm_enrichment_priority(admin_token),
        'session_engine': test_session_engine_priority(student_token),
        'canonical_taxonomy': test_canonical_taxonomy_compliance(admin_token),
        'session_quality': test_session_quality_with_priority_logic(student_token)
    }
    
    # Final results
    print("\n" + "=" * 70)
    print("FINAL RESULTS")
    print("=" * 70)
    
    passed_tests = sum(results.values())
    total_tests = len(results)
    success_rate = (passed_tests / total_tests) * 100
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name.replace('_', ' ').title():<30} {status}")
    
    print("-" * 70)
    print(f"Overall Success Rate: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
    
    if success_rate >= 75:
        print("\nüéâ TYPE DIVERSITY ENFORCEMENT & LLM ENRICHMENT TESTING SUCCESSFUL!")
        print("‚úÖ Critical requirements from review request validated")
        return True
    else:
        print("\n‚ùå TYPE DIVERSITY ENFORCEMENT & LLM ENRICHMENT TESTING FAILED!")
        print("‚ùå Some critical requirements not met")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)