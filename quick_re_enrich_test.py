#!/usr/bin/env python3
"""
Quick test for the critical re-enrichment API endpoint
"""
import requests
import json
import time

def test_re_enrichment():
    base_url = "https://prep-genius-5.preview.emergentagent.com/api"
    
    print("üö® CRITICAL RE-ENRICHMENT TEST")
    print("=" * 50)
    
    # Step 1: Admin Login
    print("1. Admin Login...")
    login_data = {
        "email": "sumedhprabhu18@gmail.com",
        "password": "admin2025"
    }
    
    try:
        response = requests.post(f"{base_url}/auth/login", json=login_data, timeout=30)
        if response.status_code == 200:
            token = response.json()['access_token']
            print("   ‚úÖ Admin login successful")
        else:
            print(f"   ‚ùå Admin login failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Admin login error: {e}")
        return False
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    # Step 2: Check current generic solutions count
    print("2. Checking current generic solutions...")
    try:
        response = requests.get(f"{base_url}/questions?limit=300", headers=headers, timeout=30)
        if response.status_code == 200:
            questions = response.json()['questions']
            generic_count = 0
            
            generic_patterns = [
                "mathematical approach to solve this problem",
                "example answer based on the question pattern",
                "detailed solution for:",
                "to be generated by llm"
            ]
            
            for q in questions:
                solution_approach = (q.get('solution_approach') or '').lower()
                detailed_solution = (q.get('detailed_solution') or '').lower()
                
                for pattern in generic_patterns:
                    if pattern in solution_approach or pattern in detailed_solution:
                        generic_count += 1
                        break
            
            print(f"   üìä Found {generic_count} questions with generic solutions out of {len(questions)} total")
        else:
            print(f"   ‚ùå Failed to get questions: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error checking questions: {e}")
        return False
    
    # Step 3: Call re-enrichment API
    print("3. Calling mass re-enrichment API...")
    try:
        response = requests.post(f"{base_url}/admin/re-enrich-all-questions", json={}, headers=headers, timeout=120)
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Re-enrichment API called successfully")
            print(f"   üìä Status: {result.get('status')}")
            print(f"   üìä Processed: {result.get('processed', 0)}")
            print(f"   üìä Success: {result.get('success', 0)}")
            print(f"   üìä Failed: {result.get('failed', 0)}")
            
            if result.get('success', 0) > 0:
                print("   üéâ Some questions were successfully re-enriched!")
                return True
            else:
                print("   ‚ö†Ô∏è No questions were successfully re-enriched")
                print(f"   Details: {result.get('details', 'No details')}")
                return False
        else:
            print(f"   ‚ùå Re-enrichment API failed: {response.status_code}")
            try:
                error_details = response.json()
                print(f"   Error: {error_details}")
            except:
                print(f"   Error: {response.text}")
            return False
    except Exception as e:
        print(f"   ‚ùå Re-enrichment API error: {e}")
        return False

if __name__ == "__main__":
    success = test_re_enrichment()
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ RE-ENRICHMENT TEST PASSED")
    else:
        print("‚ùå RE-ENRICHMENT TEST FAILED")
    print("=" * 50)