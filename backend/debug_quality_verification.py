#!/usr/bin/env python3
"""
Debug Quality Verification Issue
"""

import asyncio
import os
import json
from pyq_enrichment_service import pyq_enrichment_service

async def debug_quality_verification():
    """Debug why quality verification is returning False"""
    
    print("üêõ DEBUGGING QUALITY VERIFICATION ISSUE")
    print("=" * 60)
    
    # Test sample PYQ question
    test_stem = """
    A train travels 120 km in 2 hours. Another train travels 180 km in 3 hours. 
    What is the ratio of their speeds?
    """
    
    print(f"üìö Test Question: {test_stem.strip()}")
    
    try:
        # Get the comprehensive analysis data first
        print("\nüöÄ Step 1: Getting comprehensive analysis data...")
        comprehensive_result = await pyq_enrichment_service._perform_comprehensive_analysis(
            stem=test_stem.strip(),
            current_answer="To be generated by LLM"
        )
        
        print("üìä Comprehensive Analysis Result:")
        for key, value in comprehensive_result.items():
            print(f"  {key}: {value}")
        
        # Test semantic matching
        print("\nüéØ Step 2: Testing context-aware semantic matching...")
        canonical_category, canonical_subcategory, canonical_type = await pyq_enrichment_service._get_canonical_taxonomy_path_with_context(
            test_stem.strip(),
            comprehensive_result.get('category', ''),
            comprehensive_result.get('subcategory', ''),
            comprehensive_result.get('type_of_question', '')
        )
        
        print(f"Semantic Matching Results:")
        print(f"  Category: {comprehensive_result.get('category')} ‚Üí {canonical_category}")
        print(f"  Subcategory: {comprehensive_result.get('subcategory')} ‚Üí {canonical_subcategory}")
        print(f"  Type: {comprehensive_result.get('type_of_question')} ‚Üí {canonical_type}")
        
        # Create enrichment data for verification
        enrichment_data = comprehensive_result.copy()
        enrichment_data.update({
            'category': canonical_category,
            'subcategory': canonical_subcategory,
            'type_of_question': canonical_type
        })
        
        print(f"\nüìã Final Enrichment Data for Verification:")
        for key, value in enrichment_data.items():
            if isinstance(value, str) and len(value) > 100:
                print(f"  {key}: {value[:100]}...")
            else:
                print(f"  {key}: {value}")
        
        # Test quality verification directly
        print("\nüîç Step 3: Testing quality verification directly...")
        
        # Import the advanced service and test its verification method
        from advanced_llm_enrichment_service import AdvancedLLMEnrichmentService
        verification_service = AdvancedLLMEnrichmentService()
        
        verification_result = await verification_service._verify_response_quality(
            enrichment_data, "quality_verification", test_stem.strip()
        )
        
        print("üìä Quality Verification Result:")
        for key, value in verification_result.items():
            print(f"  {key}: {value}")
        
        # Check each validation step
        if not verification_result.get("quality_verified", False):
            print(f"\n‚ùå QUALITY VERIFICATION FAILED!")
            print(f"   Stage: {verification_result.get('validation_stage', 'unknown')}")
            print(f"   Issues: {verification_result.get('issues', [])}")
        else:
            print(f"\n‚úÖ QUALITY VERIFICATION PASSED!")
            
        # Test individual components
        print("\nüß™ Step 4: Testing individual components...")
        
        # Test Anthropic semantic validator
        print("üß† Testing Anthropic semantic validation...")
        try:
            from anthropic_semantic_validator import anthropic_semantic_validator
            semantic_result = await anthropic_semantic_validator.validate_semantic_quality(
                test_stem.strip(), enrichment_data
            )
            print(f"   Semantic validation result: {semantic_result}")
        except Exception as e:
            print(f"   ‚ùå Semantic validation error: {e}")
        
        # Test canonical taxonomy validation
        print("‚öôÔ∏è Testing canonical taxonomy validation...")
        try:
            from canonical_taxonomy_service import canonical_taxonomy_service
            
            is_valid = canonical_taxonomy_service.validate_taxonomy_path(
                canonical_category, canonical_subcategory, canonical_type
            )
            print(f"   Taxonomy path validation: {is_valid}")
            
        except Exception as e:
            print(f"   ‚ùå Taxonomy validation error: {e}")
            
    except Exception as e:
        print(f"‚ùå Debug error: {e}")
        import traceback
        traceback.print_exc()
    
    print("\nüéâ Quality Verification Debug Complete!")

if __name__ == "__main__":
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ö†Ô∏è OPENAI_API_KEY not set - tests may fail")
    
    asyncio.run(debug_quality_verification())