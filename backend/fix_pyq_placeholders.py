#!/usr/bin/env python3
"""
Fix PYQ Placeholder Fields
Simple, direct fix for placeholder text in PYQ questions
"""

import os
import sys
import json
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# Add the backend directory to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def fix_pyq_placeholders():
    """Fix placeholder text in PYQ questions with proper enrichment"""
    try:
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            raise ValueError("DATABASE_URL environment variable not found")
        
        engine = create_engine(database_url)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        
        # Import after setting up path
        from advanced_llm_enrichment_service import AdvancedLLMEnrichmentService
        from database import PYQQuestion
        
        advanced_enricher = AdvancedLLMEnrichmentService()
        
        with SessionLocal() as db:
            # Get questions with placeholder text
            questions = db.query(PYQQuestion).filter(
                PYQQuestion.is_active == True
            ).filter(
                (PYQQuestion.answer == 'To be generated by LLM') |
                (PYQQuestion.subcategory == 'To be classified by LLM') |
                (PYQQuestion.type_of_question == 'To be classified by LLM')
            ).limit(5).all()  # Start with first 5 questions
            
            logger.info(f"üìä Found {len(questions)} questions to fix")
            
            results = {
                "processed": 0,
                "successful": 0,
                "failed": 0,
                "details": []
            }
            
            for i, question in enumerate(questions):
                try:
                    logger.info(f"üîÑ Processing question {i+1}/{len(questions)}: {question.stem[:50]}...")
                    
                    # Use the advanced enrichment service
                    enrichment_result = await advanced_enricher.enrich_pyq_question(question, db)
                    
                    results["processed"] += 1
                    
                    if enrichment_result.get("success"):
                        results["successful"] += 1
                        logger.info("‚úÖ Successfully enriched question")
                        
                        # Check what was updated
                        db.refresh(question)
                        updated_fields = []
                        if question.answer and question.answer != 'To be generated by LLM':
                            updated_fields.append("answer")
                        if question.subcategory and question.subcategory != 'To be classified by LLM':
                            updated_fields.append("subcategory")
                        if question.type_of_question and question.type_of_question != 'To be classified by LLM':
                            updated_fields.append("type_of_question")
                        
                        results["details"].append({
                            "question_id": str(question.id),
                            "success": True,
                            "updated_fields": updated_fields
                        })
                    else:
                        results["failed"] += 1
                        error_msg = enrichment_result.get("error", "Unknown error")
                        logger.error(f"‚ùå Failed to enrich question: {error_msg}")
                        
                        results["details"].append({
                            "question_id": str(question.id),
                            "success": False,
                            "error": error_msg
                        })
                    
                    # Small delay between requests
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    results["processed"] += 1
                    results["failed"] += 1
                    logger.error(f"‚ùå Error processing question {question.id}: {e}")
                    
                    results["details"].append({
                        "question_id": str(question.id),
                        "success": False,
                        "error": str(e)
                    })
            
            # Print results
            print("\n" + "="*60)
            print("PYQ PLACEHOLDER FIX RESULTS")
            print("="*60)
            print(f"Questions Processed: {results['processed']}")
            print(f"Successfully Fixed: {results['successful']}")
            print(f"Failed: {results['failed']}")
            
            if results['successful'] > 0:
                success_rate = (results['successful'] / results['processed']) * 100
                print(f"Success Rate: {success_rate:.1f}%")
            
            print("="*60)
            
            # Show details
            for detail in results['details']:
                if detail['success']:
                    print(f"‚úÖ {detail['question_id']}: Fixed {', '.join(detail['updated_fields'])}")
                else:
                    print(f"‚ùå {detail['question_id']}: {detail['error'][:100]}...")
            
            return results
            
    except Exception as e:
        logger.error(f"‚ùå Fix PYQ placeholders failed: {e}")
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    asyncio.run(fix_pyq_placeholders())