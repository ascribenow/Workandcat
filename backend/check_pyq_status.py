#!/usr/bin/env python3
"""
Quick status check for PYQ questions enrichment
"""

import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

# Add the backend directory to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

def check_pyq_status():
    """Check current status of PYQ questions enrichment"""
    try:
        mongo_url = os.getenv('MONGO_URL')
        engine = create_engine(mongo_url)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        
        with SessionLocal() as db:
            # Count total PYQ questions
            total_query = text("SELECT COUNT(*) FROM pyq_questions WHERE is_active = true")
            total_result = db.execute(total_query)
            total_count = total_result.scalar()
            
            # Count questions with placeholder answer
            answer_placeholder_query = text("""
                SELECT COUNT(*) FROM pyq_questions 
                WHERE is_active = true AND answer = 'To be generated by LLM'
            """)
            answer_placeholder_result = db.execute(answer_placeholder_query)
            answer_placeholder_count = answer_placeholder_result.scalar()
            
            # Count questions with placeholder subcategory
            subcategory_placeholder_query = text("""
                SELECT COUNT(*) FROM pyq_questions 
                WHERE is_active = true AND subcategory = 'To be classified by LLM'
            """)
            subcategory_placeholder_result = db.execute(subcategory_placeholder_query)
            subcategory_placeholder_count = subcategory_placeholder_result.scalar()
            
            # Count questions with placeholder type
            type_placeholder_query = text("""
                SELECT COUNT(*) FROM pyq_questions 
                WHERE is_active = true AND type_of_question = 'To be classified by LLM'
            """)
            type_placeholder_result = db.execute(type_placeholder_query)
            type_placeholder_count = type_placeholder_result.scalar()
            
            # Count questions with any placeholder
            any_placeholder_query = text("""
                SELECT COUNT(*) FROM pyq_questions 
                WHERE is_active = true AND (
                    answer = 'To be generated by LLM' 
                    OR subcategory = 'To be classified by LLM' 
                    OR type_of_question = 'To be classified by LLM'
                )
            """)
            any_placeholder_result = db.execute(any_placeholder_query)
            any_placeholder_count = any_placeholder_result.scalar()
            
            print("="*60)
            print("PYQ QUESTIONS ENRICHMENT STATUS")
            print("="*60)
            print(f"Total Active PYQ Questions: {total_count}")
            print(f"Questions with placeholder answer: {answer_placeholder_count}")
            print(f"Questions with placeholder subcategory: {subcategory_placeholder_count}")
            print(f"Questions with placeholder type: {type_placeholder_count}")
            print(f"Questions with ANY placeholder: {any_placeholder_count}")
            print(f"Fully enriched questions: {total_count - any_placeholder_count}")
            
            if total_count > 0:
                completion_rate = ((total_count - any_placeholder_count) / total_count) * 100
                print(f"Completion Rate: {completion_rate:.1f}%")
            
            print("="*60)
            
            # Show a few examples of incomplete questions
            if any_placeholder_count > 0:
                example_query = text("""
                    SELECT id, stem, answer, subcategory, type_of_question 
                    FROM pyq_questions 
                    WHERE is_active = true AND (
                        answer = 'To be generated by LLM' 
                        OR subcategory = 'To be classified by LLM' 
                        OR type_of_question = 'To be classified by LLM'
                    )
                    LIMIT 5
                """)
                example_result = db.execute(example_query)
                examples = example_result.fetchall()
                
                print("\nEXAMPLES OF INCOMPLETE QUESTIONS:")
                for i, row in enumerate(examples, 1):
                    print(f"\n{i}. ID: {row.id}")
                    print(f"   Stem: {row.stem[:80]}...")
                    print(f"   Answer: {row.answer}")
                    print(f"   Subcategory: {row.subcategory}")
                    print(f"   Type: {row.type_of_question}")
            
    except Exception as e:
        print(f"Error checking PYQ status: {e}")

if __name__ == "__main__":
    check_pyq_status()