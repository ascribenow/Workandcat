#!/usr/bin/env python3
"""
Verify if re-enrichment worked by checking for reduced generic solutions
"""
import requests
import json

def verify_re_enrichment():
    base_url = "https://adaptive-cat.preview.emergentagent.com/api"
    
    print("üîç VERIFYING RE-ENRICHMENT RESULTS")
    print("=" * 50)
    
    # Admin Login
    login_data = {
        "email": "sumedhprabhu18@gmail.com",
        "password": "admin2025"
    }
    
    try:
        response = requests.post(f"{base_url}/auth/login", json=login_data, timeout=10)
        if response.status_code == 200:
            token = response.json()['access_token']
            print("‚úÖ Admin login successful")
        else:
            print(f"‚ùå Admin login failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Admin login error: {e}")
        return False
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    # Check current generic solutions count
    try:
        response = requests.get(f"{base_url}/questions?limit=300", headers=headers, timeout=15)
        if response.status_code == 200:
            questions = response.json()['questions']
            
            generic_patterns = [
                "mathematical approach to solve this problem",
                "example answer based on the question pattern",
                "detailed solution for:",
                "to be generated by llm"
            ]
            
            generic_count = 0
            proper_solutions = 0
            sample_generic = []
            sample_proper = []
            
            for q in questions:
                solution_approach = (q.get('solution_approach') or '').lower()
                detailed_solution = (q.get('detailed_solution') or '').lower()
                answer = (q.get('answer') or '').lower()
                
                is_generic = False
                for pattern in generic_patterns:
                    if (pattern in solution_approach or 
                        pattern in detailed_solution or 
                        pattern in answer):
                        is_generic = True
                        break
                
                if is_generic:
                    generic_count += 1
                    if len(sample_generic) < 3:
                        sample_generic.append({
                            'id': q['id'],
                            'stem': q['stem'][:60] + '...',
                            'solution': solution_approach[:60] + '...'
                        })
                else:
                    proper_solutions += 1
                    if len(sample_proper) < 3:
                        sample_proper.append({
                            'id': q['id'],
                            'stem': q['stem'][:60] + '...',
                            'solution': solution_approach[:60] + '...'
                        })
            
            print(f"üìä RESULTS:")
            print(f"   Total questions: {len(questions)}")
            print(f"   Generic solutions: {generic_count}")
            print(f"   Proper solutions: {proper_solutions}")
            print(f"   Success rate: {(proper_solutions / len(questions) * 100):.1f}%")
            
            if sample_generic:
                print(f"\n‚ùå SAMPLE GENERIC SOLUTIONS:")
                for i, q in enumerate(sample_generic):
                    print(f"   {i+1}. {q['stem']}")
                    print(f"      Solution: {q['solution']}")
            
            if sample_proper:
                print(f"\n‚úÖ SAMPLE PROPER SOLUTIONS:")
                for i, q in enumerate(sample_proper):
                    print(f"   {i+1}. {q['stem']}")
                    print(f"      Solution: {q['solution']}")
            
            # Determine if re-enrichment was successful
            if generic_count < 200:  # Significant improvement from 277
                print(f"\nüéâ RE-ENRICHMENT PARTIALLY SUCCESSFUL!")
                print(f"   Generic solutions reduced from 277 to {generic_count}")
                return True
            elif generic_count == 0:
                print(f"\nüéâ RE-ENRICHMENT FULLY SUCCESSFUL!")
                print(f"   All generic solutions eliminated!")
                return True
            else:
                print(f"\n‚ö†Ô∏è RE-ENRICHMENT NEEDS MORE TIME")
                print(f"   Still {generic_count} generic solutions remaining")
                return False
                
        else:
            print(f"‚ùå Failed to get questions: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error checking questions: {e}")
        return False

if __name__ == "__main__":
    success = verify_re_enrichment()
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ VERIFICATION PASSED - Re-enrichment working!")
    else:
        print("‚ùå VERIFICATION FAILED - More work needed")
    print("=" * 50)